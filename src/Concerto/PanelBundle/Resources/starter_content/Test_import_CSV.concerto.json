{
    "version": "5.0.beta.2.187",
    "collection": [
        {
            "class_name": "Test",
            "id": 10,
            "name": "source_import_CSV",
            "accessibility": 0,
            "protected": "1",
            "archived": "0",
            "visibility": 2,
            "type": 0,
            "code": "stop_on_error = if(stop_on_error == \"1\") { T } else { F }\nnumericDataTypes = c(\"int\",\"double\",\"decimal\")\nsuccess = T  \nerror_message = NA\n\nprint(file_path)\nif(!file.exists(file_path)) {\n  stop(\"File doesn't exist!\")\n}\n\nguessCsvType = function(csv) {\n  #guesses CSV type, 1 for regular, 2 for e.g. german locale\n  type = 1\n  header = readLines(csv,n=1)\n  count2 = 0\n  count2_elems = strsplit(header,\";\")\n  if(length(count2_elems) == 1) {\n  \tcount2 = length(count2_elems[[1]])\n  }\n  count1 = 0\n  count1_elems = strsplit(header,\",\")\n  if(length(count1_elems) == 1) {\n  \tcount1 = length(count1_elems[[1]])\n  }\n  if(count2 > count1) {\n    type = 2\n  } else if(count2 == count1){\n    print(\"Can not guess CSV type. Assuming type 1.\")\n  }\n  print(paste0(\"CSV type: \",type))\n  return(type)\n}\n\nvalidateField = function(name, value, columns) {\n  #validates field\n  if(is.null(value) || is.na(value)) {\n    error_message <<- paste0(\"CSV field \",name,\" has missing value!\")\n    print(error_message)\n    return(F)\n  }\n  \n  type = NULL\n  for(i in 1:dim(columns)[1]) {\n    if(columns[i,\"Field\"] == name) {\n      type = columns[i,\"Type\"]\n      break\n    }\n  }\n  if(is.null(type)) {\n    error_message <<- paste0(\"CSV field \",name,\" doesn't have data table equivalent!\")\n    print(error_message)\n    return(F)\n  }\n  shouldBeNumeric = F\n  for(i in 1:length(numericDataTypes)) {\n    if(grepl(numericDataTypes[i],type)) {\n      shouldBeNumeric = T\n      break\n    }\n  }\n  numericValue = as.numeric(value)\n  if(is.na(numericValue)) {\n    error_message <<- paste0(\"CSV field \",name,\" has invalid numeric value!\")\n    print(error_message)\n    return(F)\n  }\n  return(T)\n}\n\ncolumns = concerto.table.query(\"SHOW COLUMNS FROM `{{table}}`\",params=list(table=data_table))\nprint(columns)\n\ncsvType = guessCsvType(file_path)\ncsv = NULL\nif(csvType == 2) {\n  csv = read.csv2(file_path)\n} else {\n  csv = read.csv(file_path)\n}\n  \n#validation\nif(dim(csv)[1] > 0) {\n  for(i in 1:dim(csv)[1]) {\n    for(j in 1:dim(csv)[2]) {\n      if(names(csv)[j] == \"id\") { next }\n      if(!validateField(names(csv)[j], csv[i,j], columns)) {\n        if(stop_on_error) {\n          stop(\"Validation failed!\")\n        } else {\n          success = F\n          break\n        }\n      }\n    }\n    if(!success) {\n      break\n    }\n  }\n}\n  \n#data insert\nif(success && dim(csv)[1] > 0) {\n  params = list(table=data_table)\n  for(i in 1:dim(csv)[1]) {\n    sql = \"INSERT INTO `{{table}}` SET \"\n    k = 1\n    for(j in 1:dim(csv)[2]) {\n      if(names(csv)[j] == \"id\") { next }\n      params[[paste0(\"name\",j)]] = names(csv)[j]\n      params[[paste0(\"value\",j)]] = csv[i,j]\n      if(k > 1) {\n        sql = paste0(sql, \",\")\n      }\n      sql = paste0(sql, \"`{{name\",j,\"}}`='{{value\",j,\"}}'\")\n      k = k + 1\n    }\n    concerto.table.query(sql, params)\n  }\n}\n  \nif(success) {\n  .branch = \"success\"\n} else {\n  .branch = \"failure\"\n}",
            "resumable": "0",
            "outdated": "0",
            "description": "",
            "variables": [
                {
                    "class_name": "TestVariable",
                    "id": 148,
                    "name": "success",
                    "type": 2,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": "0",
                    "test": 10,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 149,
                    "name": "data_table",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 10,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 150,
                    "name": "failure",
                    "type": 2,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 10,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 151,
                    "name": "error_message",
                    "type": 1,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 10,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 152,
                    "name": "stop_on_error",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 10,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 153,
                    "name": "file_path",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 10,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 154,
                    "name": ".branch",
                    "type": 1,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 10,
                    "parentVariable": null
                }
            ],
            "sourceWizard": null,
            "sourceWizardName": null,
            "sourceWizardTest": null,
            "sourceWizardTestName": null,
            "updatedOn": "2017-02-21 16:02:34",
            "updatedByName": "",
            "nodes": [],
            "nodesConnections": [],
            "tags": "",
            "owner": 1,
            "groups": "",
            "starterContent": false,
            "rev": 2,
            "hash": "f1961141bcbbbc66d268ba6261bd31c6607ab020"
        },
        {
            "class_name": "TestWizard",
            "id": 6,
            "name": "import_CSV",
            "description": "",
            "accessibility": 0,
            "protected": "1",
            "archived": "0",
            "steps": [
                {
                    "class_name": "TestWizardStep",
                    "id": 31,
                    "title": "CSV import",
                    "description": "<p>Import options<\/p>\n",
                    "orderNum": 0,
                    "colsNum": 0,
                    "wizard": 6,
                    "params": [
                        {
                            "class_name": "TestWizardParam",
                            "id": 118,
                            "label": "Data table",
                            "description": "<p>Data table to import to<\/p>\n",
                            "hideCondition": "",
                            "type": 6,
                            "passableThroughUrl": "0",
                            "value": null,
                            "testVariable": 149,
                            "name": "data_table",
                            "wizardStep": 31,
                            "stepTitle": "CSV import",
                            "order": 0,
                            "wizard": 6,
                            "definition": {
                                "placeholder": 0,
                                "defvalue": null
                            }
                        },
                        {
                            "class_name": "TestWizardParam",
                            "id": 119,
                            "label": "Should stop on error",
                            "description": "<p>If this is checked, execution will stop on validation errors and&nbsp;<strong>failure<\/strong>&nbsp;branch will never be executed.<\/p>\n",
                            "hideCondition": "",
                            "type": 4,
                            "passableThroughUrl": "0",
                            "value": "0",
                            "testVariable": 152,
                            "name": "stop_on_error",
                            "wizardStep": 31,
                            "stepTitle": "CSV import",
                            "order": 0,
                            "wizard": 6,
                            "definition": {
                                "placeholder": 0
                            }
                        }
                    ]
                }
            ],
            "test": 10,
            "testName": "source_import_CSV",
            "updatedOn": "2017-02-21 16:02:34",
            "updatedByName": "",
            "owner": 1,
            "groups": "",
            "starterContent": true,
            "rev": 2,
            "hash": "e73f4ec16e4f98e43493dfde366068b4327936d0"
        },
        {
            "class_name": "Test",
            "id": 20,
            "name": "import_CSV",
            "accessibility": 0,
            "protected": "1",
            "archived": "0",
            "visibility": 2,
            "type": 1,
            "code": "stop_on_error = if(stop_on_error == \"1\") { T } else { F }\nnumericDataTypes = c(\"int\",\"double\",\"decimal\")\nsuccess = T  \nerror_message = NA\n\nprint(file_path)\nif(!file.exists(file_path)) {\n  stop(\"File doesn't exist!\")\n}\n\nguessCsvType = function(csv) {\n  #guesses CSV type, 1 for regular, 2 for e.g. german locale\n  type = 1\n  header = readLines(csv,n=1)\n  count2 = 0\n  count2_elems = strsplit(header,\";\")\n  if(length(count2_elems) == 1) {\n  \tcount2 = length(count2_elems[[1]])\n  }\n  count1 = 0\n  count1_elems = strsplit(header,\",\")\n  if(length(count1_elems) == 1) {\n  \tcount1 = length(count1_elems[[1]])\n  }\n  if(count2 > count1) {\n    type = 2\n  } else if(count2 == count1){\n    print(\"Can not guess CSV type. Assuming type 1.\")\n  }\n  print(paste0(\"CSV type: \",type))\n  return(type)\n}\n\nvalidateField = function(name, value, columns) {\n  #validates field\n  if(is.null(value) || is.na(value)) {\n    error_message <<- paste0(\"CSV field \",name,\" has missing value!\")\n    print(error_message)\n    return(F)\n  }\n  \n  type = NULL\n  for(i in 1:dim(columns)[1]) {\n    if(columns[i,\"Field\"] == name) {\n      type = columns[i,\"Type\"]\n      break\n    }\n  }\n  if(is.null(type)) {\n    error_message <<- paste0(\"CSV field \",name,\" doesn't have data table equivalent!\")\n    print(error_message)\n    return(F)\n  }\n  shouldBeNumeric = F\n  for(i in 1:length(numericDataTypes)) {\n    if(grepl(numericDataTypes[i],type)) {\n      shouldBeNumeric = T\n      break\n    }\n  }\n  numericValue = as.numeric(value)\n  if(is.na(numericValue)) {\n    error_message <<- paste0(\"CSV field \",name,\" has invalid numeric value!\")\n    print(error_message)\n    return(F)\n  }\n  return(T)\n}\n\ncolumns = concerto.table.query(\"SHOW COLUMNS FROM `{{table}}`\",params=list(table=data_table))\nprint(columns)\n\ncsvType = guessCsvType(file_path)\ncsv = NULL\nif(csvType == 2) {\n  csv = read.csv2(file_path)\n} else {\n  csv = read.csv(file_path)\n}\n  \n#validation\nif(dim(csv)[1] > 0) {\n  for(i in 1:dim(csv)[1]) {\n    for(j in 1:dim(csv)[2]) {\n      if(names(csv)[j] == \"id\") { next }\n      if(!validateField(names(csv)[j], csv[i,j], columns)) {\n        if(stop_on_error) {\n          stop(\"Validation failed!\")\n        } else {\n          success = F\n          break\n        }\n      }\n    }\n    if(!success) {\n      break\n    }\n  }\n}\n  \n#data insert\nif(success && dim(csv)[1] > 0) {\n  params = list(table=data_table)\n  for(i in 1:dim(csv)[1]) {\n    sql = \"INSERT INTO `{{table}}` SET \"\n    k = 1\n    for(j in 1:dim(csv)[2]) {\n      if(names(csv)[j] == \"id\") { next }\n      params[[paste0(\"name\",j)]] = names(csv)[j]\n      params[[paste0(\"value\",j)]] = csv[i,j]\n      if(k > 1) {\n        sql = paste0(sql, \",\")\n      }\n      sql = paste0(sql, \"`{{name\",j,\"}}`='{{value\",j,\"}}'\")\n      k = k + 1\n    }\n    concerto.table.query(sql, params)\n  }\n}\n  \nif(success) {\n  .branch = \"success\"\n} else {\n  .branch = \"failure\"\n}",
            "resumable": "0",
            "outdated": "0",
            "description": "",
            "variables": [
                {
                    "class_name": "TestVariable",
                    "id": 243,
                    "name": "success",
                    "type": 2,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": "0",
                    "test": 20,
                    "parentVariable": 148
                },
                {
                    "class_name": "TestVariable",
                    "id": 244,
                    "name": "data_table",
                    "type": 0,
                    "description": "<p>Data table to import to<\/p>\n",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 20,
                    "parentVariable": 149
                },
                {
                    "class_name": "TestVariable",
                    "id": 245,
                    "name": "failure",
                    "type": 2,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 20,
                    "parentVariable": 150
                },
                {
                    "class_name": "TestVariable",
                    "id": 246,
                    "name": "error_message",
                    "type": 1,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 20,
                    "parentVariable": 151
                },
                {
                    "class_name": "TestVariable",
                    "id": 247,
                    "name": "stop_on_error",
                    "type": 0,
                    "description": "<p>If this is checked, execution will stop on validation errors and&nbsp;<strong>failure<\/strong>&nbsp;branch will never be executed.<\/p>\n",
                    "passableThroughUrl": "0",
                    "value": "0",
                    "test": 20,
                    "parentVariable": 152
                },
                {
                    "class_name": "TestVariable",
                    "id": 248,
                    "name": "file_path",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 20,
                    "parentVariable": 153
                },
                {
                    "class_name": "TestVariable",
                    "id": 249,
                    "name": ".branch",
                    "type": 1,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 20,
                    "parentVariable": 154
                }
            ],
            "sourceWizard": 6,
            "sourceWizardName": "import_CSV",
            "sourceWizardTest": 10,
            "sourceWizardTestName": "source_import_CSV",
            "updatedOn": "2017-02-21 16:02:35",
            "updatedByName": "",
            "nodes": [],
            "nodesConnections": [],
            "tags": "_concerto_core",
            "owner": 1,
            "groups": "",
            "starterContent": true,
            "rev": 2,
            "hash": "9dc8f2497eb56727e65407835f4e93cdc75de28a"
        }
    ]
}